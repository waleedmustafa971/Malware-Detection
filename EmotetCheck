#include <iostream>
#include <windows.h>
#include <tlhelp32.h>
#include <string>
#include <winreg.h>

// Function to check for suspicious processes
bool checkSuspiciousProcesses() {
    bool detected = false;
    HANDLE hProcessSnap;
    PROCESSENTRY32 pe32;

    hProcessSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    if (hProcessSnap == INVALID_HANDLE_VALUE) {
        std::cerr << "Failed to take process snapshot" << std::endl;
        return false;
    }

    pe32.dwSize = sizeof(PROCESSENTRY32);

    if (!Process32First(hProcessSnap, &pe32)) {
        CloseHandle(hProcessSnap);
        std::cerr << "Failed to retrieve process information" << std::endl;
        return false;
    }

    do {
        std::string processName = pe32.szExeFile;
        if (processName == "emotet.exe" || processName == "cmd.exe" || processName == "powershell.exe") {
            std::cout << "Suspicious process detected: " << processName << std::endl;
            detected = true;
        }
    } while (Process32Next(hProcessSnap, &pe32));

    CloseHandle(hProcessSnap);
    return detected;
}

// Function to check for suspicious registry keys
bool checkSuspiciousRegistryKeys() {
    HKEY hKey;
    bool detected = false;

    // Example registry path to check (this is a common persistence method)
    const char* registryPath = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run";
    const char* valueName = "Emotet";

    if (RegOpenKeyEx(HKEY_CURRENT_USER, registryPath, 0, KEY_READ, &hKey) == ERROR_SUCCESS) {
        char value[255];
        DWORD value_length = 255;
        if (RegQueryValueEx(hKey, valueName, NULL, NULL, (LPBYTE)value, &value_length) == ERROR_SUCCESS) {
            std::cout << "Suspicious registry key detected: " << valueName << " -> " << value << std::endl;
            detected = true;
        } else {
            std::cout << "No suspicious registry keys found." << std::endl;
        }
        RegCloseKey(hKey);
    } else {
        std::cerr << "Failed to open registry key" << std::endl;
    }

    return detected;
}

int main() {
    bool isMalwareDetected = false;

    // Check for suspicious processes
    isMalwareDetected |= checkSuspiciousProcesses();

    // Check for suspicious registry keys
    isMalwareDetected |= checkSuspiciousRegistryKeys();

    if (isMalwareDetected) {
        std::cout << "Potential Emotet activity detected!" << std::endl;
    } else {
        std::cout << "No suspicious activity detected." << std::endl;
    }

    return 0;
}
